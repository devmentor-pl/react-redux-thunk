{"version":3,"sources":["types/ip.js","actions/ip.js","IP.js","serviceWorker.js","reducers/ip.js","index.js"],"names":["getIP","dispatch","getState","fetch","then","resp","ok","json","Error","ip","type","types","payload","catch","err","message","addError","IP","useDispatch","useSelector","state","messages","useEffect","messagesView","map","item","class","length","Boolean","window","location","hostname","match","initState","reducer","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"wPAIe,EAHA,QAGA,EAFM,aCsBRA,EAAQ,kBAAM,SAACC,EAAUC,GAClC,OAAOC,MAtBC,qCAuBHC,MAAM,SAAAC,GACH,GAAGA,EAAKC,GAAM,OAAOD,EAAKE,OAC1B,MAAM,IAAIC,MAAM,WAEnBJ,MAAM,SAAAC,GAAI,OAAIJ,GAzBFQ,EAyBkBJ,EAAKI,GAxBjC,CACHC,KAAMC,EACNC,QAAS,CACLH,GAAIA,MAJK,IAAAA,KA0BZI,OAAO,SAAAC,GAAG,OAAIb,EAjBC,SAAAa,GACpB,MAAO,CACHJ,KAAMC,EACNC,QAAS,CACLG,QAASD,EACTJ,KAAM,UAYcM,CAAUF,SCN1BG,EApBL,WACP,IAAMhB,EAAWiB,cADJ,EAEYC,aAAY,SAAAC,GAAK,OAAIA,KAAtCX,EAFK,EAELA,GAAIY,EAFC,EAEDA,SAEZC,qBAAU,WACNrB,EAASD,OACV,IAEH,IAAMuB,EAAeF,EAASG,KAAK,SAAAC,GAAI,OACnC,wBAAIC,MAAQD,EAAKf,MAASe,EAAKV,YAGnC,OACI,iCACMQ,EAAaI,OAAS,GAAK,4BAAMJ,GACnC,yCAAgBd,KCRRmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kCCfAC,EAAY,CACdxB,GAAI,UACJY,SAAU,IAuBCa,EApBC,WAAgC,IAA/Bd,EAA8B,uDAAtBa,EAAWE,EAAW,uCAC3C,OAAOA,EAAOzB,MACV,KAAKC,EACD,OAAO,2BACAS,GADP,IAEIX,GAAI0B,EAAOvB,QAAQH,KAE3B,KAAKE,EAAL,MAC4BwB,EAAOvB,QAAxBG,EADX,EACWA,QAASL,EADpB,EACoBA,KAChB,OAAO,2BACAU,GADP,IAEIC,SAAS,GAAD,mBAAMD,EAAMC,UAAZ,CACJ,CAACN,QAASA,EAASL,KAAMA,OAGrC,QACI,OAAOU,ICbbgB,EAAQC,YACVC,EACAC,YAAgBC,MAGpBC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUP,MAAQA,GACd,kBAAC,EAAD,QAGRQ,SAASC,eAAe,SF6GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdrC,OAAM,SAAAsC,GACLC,QAAQD,MAAMA,EAAMpC,c","file":"static/js/main.57c46f92.chunk.js","sourcesContent":["// ./src/types/ip.js\r\nconst SET_IP = 'setIP';\r\nconst ADD_ERROR_IP = 'addErrorIP';\r\n\r\nexport default {\r\n    SET_IP,\r\n    ADD_ERROR_IP,\r\n};","// ./src/actions/ip.js\r\nimport types from './../types/ip';\r\n\r\nconst url = 'https://api.ipify.org?format=json';\r\n\r\nexport const setIP = ip => {\r\n    return {\r\n        type: types.SET_IP,\r\n        payload: {\r\n            ip: ip,\r\n        }\r\n    }\r\n}\r\n\r\nexport const addError = err => {\r\n    return {\r\n        type: types.ADD_ERROR_IP,\r\n        payload: {\r\n            message: err,\r\n            type: 'error',\r\n        }\r\n    }\r\n}\r\n\r\nexport const getIP = () => (dispatch, getState) => {\r\n    return fetch(url)\r\n        .then( resp => {\r\n            if(resp.ok) { return resp.json(); }\r\n            throw new Error('Err!');\r\n        })\r\n        .then( resp => dispatch(setIP( resp.ip )))\r\n        .catch( err => dispatch(addError( err )))\r\n}","// ./src/IP.js\r\nimport React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getIP } from './actions/ip';\r\n\r\nconst IP = () => {\r\n    const dispatch = useDispatch();\r\n    const { ip, messages } = useSelector(state => state);\r\n\r\n    useEffect(() => {\r\n        dispatch(getIP());\r\n    }, []);\r\n\r\n    const messagesView = messages.map( item => (\r\n        <li class={ item.type }>{ item.message }</li>\r\n    ));\r\n\r\n    return (\r\n        <section>\r\n            { messagesView.length > 0 && <ul>{ messagesView }</ul> }\r\n            <h1>Twoje IP: { ip }</h1>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default  IP;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// ./src/reducers/ip.js\r\nimport types from '../types/ip';\r\n\r\nconst initState = { \r\n    ip: '0.0.0.0',\r\n    messages: [],\r\n};\r\n\r\nconst reducer = (state = initState, action) => {\r\n    switch(action.type) {\r\n        case types.SET_IP:\r\n            return {\r\n                ...state,\r\n                ip: action.payload.ip,\r\n            };\r\n        case types.ADD_ERROR_IP:\r\n            const {message, type} = action.payload;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages,\r\n                    {message: message, type: type},\r\n                ],\r\n            };\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","// ./src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport IP from './IP';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport reducers from './reducers/ip.js';\n\nconst store = createStore(\n    reducers,\n    applyMiddleware(thunk),\n);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={ store }>\n            <IP />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}